package code.blurone.snifferexploited.v1_20_R2

import org.bukkit.GameMode
import org.bukkit.Material
import org.bukkit.configuration.ConfigurationSection
import org.bukkit.craftbukkit.v1_20_R2.entity.CraftSniffer
import org.bukkit.entity.Sniffer
import org.bukkit.event.EventHandler
import org.bukkit.event.Listener
import org.bukkit.event.player.PlayerInteractEntityEvent
import org.bukkit.event.player.PlayerTeleportEvent
import org.bukkit.inventory.EquipmentSlot
import org.bukkit.inventory.ItemStack
import org.bukkit.metadata.FixedMetadataValue
import org.bukkit.plugin.java.JavaPlugin
import org.bukkit.scheduler.BukkitRunnable
import kotlin.math.atan2
import kotlin.math.pow
import kotlin.math.sqrt

class HighOnSugar(
    private val plugin: JavaPlugin,
    config: ConfigurationSection,
    private val drop: Boolean,
    private val createPotion: () -> ItemStack
) : Listener {
    companion object {
        internal const val HIGH_ON_SUGAR_META_NAME = "sniffer_exploited:high_on_sugar"
    }

    private val invincibleSniffers = config.getBoolean("invincible_sniffers", false)
    private val timeBeforeExploding = (config.getDouble("time_before_exploding", 4.0) * 5).toInt()
    private val pacificExplosion = config.getBoolean("pacific_explosion", false)
    private val minFire = config.getInt("min_fire", 2) - 1
    private val initialSpeed = config.getDouble("initial_speed", 10.0)
    private val potionDropChance = config.getDouble("potion_drop_chance", 100.0) * 0.01
    private val explosionChance = config.getDouble("explosion_chance", 100.0) * 0.01

    @EventHandler
    private fun playerInteractEvent(event: PlayerInteractEntityEvent)
    {
        if (event.player.gameMode == GameMode.SPECTATOR) return

        val sniffer = event.rightClicked as? CraftSniffer ?: return

        val sugarStack = event.player.inventory.getItem(event.hand) ?: return

        if (sugarStack.type != Material.SUGAR) return

        if (event.hand == EquipmentSlot.HAND)
            event.player.swingMainHand()
        else
            event.player.swingOffHand()

        if (event.player.gameMode != GameMode.CREATIVE) sugarStack.amount--

        (sniffer.getMetadata(HIGH_ON_SUGAR_META_NAME).firstOrNull()?.value() as? RunAroundLikeHighOnSugarGoal)?.let {
            it.potentiate()
            if (it.started) {
                sniffer.state = Sniffer.State.SNIFFING
                sniffer.handle.sniffingAnimationState.startIfStopped(sniffer.handle.tickCount)
            }
            return
        }

        if (invincibleSniffers)
            sniffer.isInvulnerable = true

        sniffer.handle.goalSelector.removeAllGoals { it.stop(); true }
        sniffer.handle.navigation.stop()

        sniffer.teleport(sniffer.location.apply {
            yaw = Math.toDegrees(
                atan2(
                event.player.location.z - sniffer.location.z, event.player.location.x - sniffer.location.x
            )
            ).toFloat() - 90

            pitch = Math.toDegrees(-atan2(
                event.player.eyeLocation.y - sniffer.eyeLocation.y,
                sqrt(
                (event.player.location.x - sniffer.location.x).pow(2) + (event.player.location.z - sniffer.location.z).pow(2)
                )
            )
            ).toFloat()
        }, PlayerTeleportEvent.TeleportCause.PLUGIN)
        sniffer.handle.setYBodyRot(sniffer.handle.yHeadRot)

        val goal = RunAroundLikeHighOnSugarGoal(
            sniffer.handle,
            timeBeforeExploding,
            pacificExplosion,
            minFire,
            if (drop) potionDropChance else 0.0,
            explosionChance,
            initialSpeed,
            plugin,
            createPotion
        )

        object : BukkitRunnable() {
            override fun run() {
                sniffer.state = Sniffer.State.SNIFFING
                sniffer.handle.sniffingAnimationState.startIfStopped(sniffer.handle.tickCount)
            }
        }.runTaskLater(plugin, 10)

        object : BukkitRunnable() {
            override fun run() {
                sniffer.handle.goalSelector.addGoal(0, goal)
                sniffer.handle.goalSelector.availableGoals.last { it.goal == goal }.start()
            }
        }.runTaskLater(plugin, 30)

        sniffer.setMetadata(HIGH_ON_SUGAR_META_NAME, FixedMetadataValue(plugin, goal))
    }
}