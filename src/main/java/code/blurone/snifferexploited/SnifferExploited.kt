package code.blurone.snifferexploited

/*
import net.minecraft.core.MappedRegistry
import net.minecraft.core.Registry
import net.minecraft.core.registries.BuiltInRegistries
import net.minecraft.world.effect.MobEffectInstance
import net.minecraft.world.effect.MobEffects
import net.minecraft.world.item.Item
import net.minecraft.world.item.Items
import net.minecraft.world.item.alchemy.Potion
import net.minecraft.world.item.alchemy.PotionBrewing
import net.minecraft.world.item.alchemy.Potions
*/
import code.blurone.snifferexploited.commands.SniffCommand
import org.bukkit.Bukkit
import org.bukkit.NamespacedKey
import org.bukkit.plugin.java.JavaPlugin


class SnifferExploited : JavaPlugin() {
    var potionOfSniffing: PotionOfSniffing? = null
    //private val experimentalPotions = config.getBoolean("experimentalPotions", false)

    override fun onEnable() {
        // Plugin startup logic
        saveDefaultConfig()


        config.getConfigurationSection("potion_of_sniffing")?.let {
            if (!it.getBoolean("enabled", false))
                return@let

            potionOfSniffing = PotionOfSniffing(this, it)
            server.pluginManager.registerEvents(potionOfSniffing!!, this)

            config.getConfigurationSection("translations")?.let letSequel@{ jt ->
                if (!jt.getBoolean("enabled", false))
                    return@letSequel

                val pt = config.getConfigurationSection("potion_translations")
                val st = config.getConfigurationSection("splash_translations")
                val lt = config.getConfigurationSection("lingering_translations")
                val nt = config.getConfigurationSection("info_translations")

                if (pt != null && st != null && lt != null && nt != null)
                    server.pluginManager.registerEvents(OcdTranslator(pt, st, lt, nt), this)
                else
                    logger.warning("One or more translation sections are missing. Disabling translation feature.")
            }
        }

        config.getConfigurationSection("high_on_sugar")?.let {
            if (it.getBoolean("enabled", false))
                server.pluginManager.registerEvents(HighOnSugar(this, it, potionOfSniffing != null), this)
        }

        config.getConfigurationSection("slime_sniffing")?.let {
            val dusc = config.getDouble("dig_up_slime_chance", 40.0)
            if (it.getBoolean("enabled", false) && dusc != 0.0)
                server.pluginManager.registerEvents(SlimeChunkSniffer(dusc), this)
        }

        /* Broken due to nms updates
        if (!experimentalPotions) return

        server.pluginManager.registerEvents(ExperimentalPotionListener(logger), this)

        /*
        //val wereAccessible: MutableList<Boolean> = mutableListOf()

        // Unfreeze registry
        val frozenField = MappedRegistry::class.java.getDeclaredField("l") //l -> frozen: Boolean
        wereAccessible.add(frozenField.isAccessible)
        frozenField.isAccessible = true
        frozenField.set(BuiltInRegistries.POTION, false)*/

        // Register potions
        val addMixMethod = PotionBrewing().javaClass.getDeclaredMethod("a", Potion::class.java, Item::class.java, Potion::class.java)
        val ammWasAccessible = addMixMethod.isAccessible
        addMixMethod.isAccessible = true

        /*
        val hungerPotion = Registry.register(BuiltInRegistries.POTION, "hunger", Potion("hunger", MobEffectInstance(MobEffects.HUNGER, 900))) as Potion
        val longHungerPotion = Registry.register(BuiltInRegistries.POTION, "long_hunger", Potion("hunger", MobEffectInstance(MobEffects.HUNGER, 1800))) as Potion
        val strongHungerPotion = Registry.register(BuiltInRegistries.POTION, "strong_hunger", Potion("hunger", MobEffectInstance(MobEffects.HUNGER, 450, 1))) as Potion

        val glowingPotion = Registry.register(BuiltInRegistries.POTION, "glowing", Potion("glowing", MobEffectInstance(MobEffects.GLOWING, 1800))) as Potion
        val longGlowingPotion = Registry.register(BuiltInRegistries.POTION, "long_glowing", Potion("glowing", MobEffectInstance(MobEffects.GLOWING, 4800))) as Potion

        addMixMethod.invoke(PotionBrewing(), Potions.AWKWARD, Items.PITCHER_PLANT, hungerPotion)
        addMixMethod.invoke(PotionBrewing(), hungerPotion, Items.REDSTONE, longHungerPotion)
        addMixMethod.invoke(PotionBrewing(), hungerPotion, Items.GLOWSTONE_DUST, strongHungerPotion)

        addMixMethod.invoke(PotionBrewing(), Potions.AWKWARD, Items.TORCHFLOWER, glowingPotion)
        addMixMethod.invoke(PotionBrewing(), glowingPotion, Items.REDSTONE, longGlowingPotion)
         */

        addMixMethod.invoke(PotionBrewing(), Potions.AWKWARD, Items.PITCHER_PLANT, Potions.EMPTY)
        addMixMethod.invoke(PotionBrewing(), Potions.AWKWARD, Items.TORCHFLOWER, Potions.EMPTY)
        addMixMethod.invoke(PotionBrewing(), Potions.EMPTY, Items.REDSTONE, Potions.EMPTY)
        addMixMethod.invoke(PotionBrewing(), Potions.EMPTY, Items.GLOWSTONE_DUST, Potions.EMPTY)
        addMixMethod.invoke(PotionBrewing(), Potions.EMPTY, Items.FERMENTED_SPIDER_EYE, Potions.EMPTY)

        /*
        // Refreeze registry
        BuiltInRegistries.POTION.freeze()
        addMixMethod.isAccessible = wereAccessible.removeLast()
        frozenField.isAccessible = wereAccessible.removeLast()*/
        addMixMethod.isAccessible = ammWasAccessible
        */
    }

    override fun onDisable() {
        // Plugin shutdown logic
        potionOfSniffing?.disable()
    }
}
