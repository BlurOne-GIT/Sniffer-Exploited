package code.blurone.snifferexploited

import org.bukkit.Material
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftItem
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftSniffer
import org.bukkit.entity.Sniffer
import org.bukkit.event.EventHandler
import org.bukkit.event.Listener
import org.bukkit.event.entity.ItemSpawnEvent
import org.bukkit.plugin.java.JavaPlugin
import org.bukkit.scheduler.BukkitRunnable

class SnifferExploited : JavaPlugin(), Listener {
    override fun onEnable() {
        // Plugin startup logic
        server.pluginManager.registerEvents(this, this)
    }

    override fun onDisable() {
        // Plugin shutdown logic
    }

    @EventHandler
    fun onSugarDropped(event: ItemSpawnEvent) {
        logger.info("at least the event works")
        val itemStack = event.entity.itemStack
        if (itemStack.data?.itemType != Material.LEGACY_SUGAR && itemStack.data?.itemType != Material.SUGAR) return
        logger.info("Sugar dropped")

        object : BukkitRunnable()
        {
            override fun run() {
                if (!event.entity.isValid) {
                    logger.info("entity is not valid")
                    cancel()
                    return
                }

                if (!event.entity.isOnGround) return

                for (sniffer in event.entity.world.getNearbyEntities(event.entity.location, 9.0, 9.0, 9.0).filterIsInstance<Sniffer>())
                {
                    logger.info("sniffer found")
                    
                    (sniffer as CraftSniffer).handle.navigation.moveTo((event.entity as CraftItem).handle, 5.0)

                    object : BukkitRunnable()
                    {
                        override fun run()
                        {
                            if (!sniffer.isValid || !event.entity.isValid || !sniffer.handle.navigation.isStuck)
                            {
                                sniffer.handle.navigation.stop()
                                cancel()
                                return
                            }

                            if (!sniffer.handle.navigation.isDone)
                                return

                            val explosionMultiplier = itemStack.amount - 1
                            event.entity.remove()

                            sniffer.state = Sniffer.State.SNIFFING

                            object : BukkitRunnable()
                            {
                                override fun run()
                                {
                                    sniffer.world.createExplosion(sniffer.location, 4.0f + explosionMultiplier, true, true, sniffer)
                                    sniffer.remove()
                                }
                            }.runTaskLater(this@SnifferExploited, 40)
                            cancel()
                        }
                    }.runTaskTimer(this@SnifferExploited, 0, 5)
                }
                cancel()
            }
        }.runTaskTimer(this, 0, 5)
    }
}
