package code.blurone.snifferexploited

import org.apache.commons.lang.UnhandledException
import org.bukkit.*
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftDisplay
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftPlayer
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftSniffer
import org.bukkit.entity.*
import org.bukkit.event.EventHandler
import org.bukkit.event.EventPriority
import org.bukkit.event.Listener
import org.bukkit.event.block.Action
import org.bukkit.event.block.BlockBreakEvent
import org.bukkit.event.block.BlockPlaceEvent
import org.bukkit.event.player.PlayerInteractEntityEvent
import org.bukkit.event.player.PlayerInteractEvent
import org.bukkit.inventory.EquipmentSlot
import org.bukkit.inventory.ItemStack
import org.bukkit.inventory.meta.SkullMeta
import org.bukkit.metadata.FixedMetadataValue
import org.bukkit.plugin.java.JavaPlugin
import org.bukkit.scheduler.BukkitRunnable
import org.bukkit.util.Transformation
import org.joml.Vector3f

class SnifferExploited : JavaPlugin(), Listener {

    private val map = mutableMapOf<Location, Display>()

    override fun onEnable() {
        // Plugin startup logic
        saveDefaultConfig()
        server.pluginManager.registerEvents(this, this)
    }

    override fun onDisable() {
        // Plugin shutdown logic
        map.forEach { it.value.remove() }
    }

    @EventHandler
    fun playerInteractEvent(event: PlayerInteractEntityEvent)
    {
        if (event.rightClicked.type != EntityType.SNIFFER || event.player.gameMode == GameMode.SPECTATOR ||
            (event.hand == EquipmentSlot.HAND && !(event.player.inventory.itemInMainHand.type == Material.SUGAR || event.player.inventory.itemInMainHand.type == Material.LEGACY_SUGAR)) ||
            (event.hand == EquipmentSlot.OFF_HAND && !(event.player.inventory.itemInOffHand.type == Material.SUGAR || event.player.inventory.itemInOffHand.type == Material.LEGACY_SUGAR)))
            return

        if (event.player.gameMode != GameMode.CREATIVE) {
            val sugarStack = if (event.hand == EquipmentSlot.HAND) event.player.inventory.itemInMainHand else event.player.inventory.itemInOffHand
            sugarStack.amount--
        }

        val sniffer = event.rightClicked as CraftSniffer

        if (!sniffer.hasMetadata(highOnSugarMetaName))
        {
            sniffer.handle.goalSelector.removeAllGoals { it.stop(); true }
            sniffer.handle.navigation.stop()
            sniffer.handle.lookAt((event.player as CraftPlayer).handle, 2f, 2f)
            val goal = RunAroundLikeHighOnSugarGoal(sniffer)
            object : BukkitRunnable()
            {
                override fun run() {sniffer.state = Sniffer.State.SNIFFING}
            }.runTaskLater(this, 5)
            object : BukkitRunnable()
            {
                override fun run() {
                    sniffer.handle.goalSelector.addGoal(0, goal)
                    sniffer.handle.goalSelector.availableGoals.first { it.goal == goal }.start()
                }
            }.runTaskLater(this, 25)
            sniffer.setMetadata(highOnSugarMetaName, FixedMetadataValue(this, goal))
        }
        else
        {
            sniffer.state = Sniffer.State.SNIFFING
            (sniffer.getMetadata(highOnSugarMetaName).first().value() as RunAroundLikeHighOnSugarGoal).potentiate()
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    fun cancelSnifferNosePlacementEvent(event: BlockPlaceEvent)
    {
        if (event.itemInHand.type != Material.PLAYER_HEAD) return
        logger.info("it head")

        val skullMeta = event.itemInHand.itemMeta as SkullMeta
        if (skullMeta.hasOwner() && skullMeta.ownerProfile!!.name == snifferNoseName) event.isCancelled = true
        logger.info("it owner ${skullMeta.ownerProfile!!.name}")
        logger.info("it cancelled ${event.isCancelled}")
    }

    @EventHandler(priority = EventPriority.LOWEST)
    fun sniffEvent(event: PlayerInteractEvent)
    {
        if (event.item?.type != Material.PLAYER_HEAD ||
            (event.action != Action.RIGHT_CLICK_AIR &&
            event.action != Action.RIGHT_CLICK_BLOCK)) return

        val skullMeta = event.item!!.itemMeta as SkullMeta
        if (!skullMeta.hasOwner() || skullMeta.ownerProfile!!.name != snifferNoseName) return

        event.item!!.amount--
        event.player.playSound(event.player.location, Sound.ENTITY_SNIFFER_SNIFFING, SoundCategory.PLAYERS, 4f, 0.75f)
        scanForOres(event.player, 16)
    }

    @EventHandler
    fun killDisplayEvent(event: BlockBreakEvent)
    {
        if (map.isEmpty() || !map.containsKey(event.block.location)) return

        map[event.block.location]!!.remove()
        map.remove(event.block.location)
    }

    private fun scanForOres(player: Player, range: Int)
    {
        for (x in -range..range)
            for (y in -range..range)
                for (z in -range..range)
                {
                    val location = Location(player.world,
                        (player.location.blockX + x).toDouble(),
                        (player.location.blockY + y).toDouble(),
                        (player.location.blockZ + z).toDouble()
                    )
                    val block = player.world.getBlockAt(location)
                    if ((!block.type.name.contains("ORE") && block.type != Material.ANCIENT_DEBRIS && block.type != Material.BUDDING_AMETHYST) || block.type == Material.SPORE_BLOSSOM)
                        continue

                    val display: Display
                    if (config.getString("oreSniffingMode", "block") == "block")
                    {
                        display = player.world.spawnEntity(location, EntityType.BLOCK_DISPLAY, false) as BlockDisplay
                        display.transformation = Transformation(
                            Vector3f(0.0001f, 0.0001f, 0.0001f),
                            display.transformation.leftRotation,
                            Vector3f(0.9998f, 0.9998f, 0.9998f),
                            display.transformation.rightRotation
                        )
                        display.block = block.blockData
                    } else {
                        display = player.world.spawnEntity(location.add(0.5, 0.5, 0.5), EntityType.ITEM_DISPLAY, false) as ItemDisplay
                        val raw = config.getBoolean("rawOresForItem", false)
                        display.billboard = Display.Billboard.CENTER
                        display.itemStack = ItemStack(when (block.type)
                        {
                            Material.COAL_ORE,
                            Material.DEEPSLATE_COAL_ORE -> Material.COAL
                            Material.IRON_ORE,
                            Material.DEEPSLATE_IRON_ORE -> if (raw) Material.RAW_IRON else Material.IRON_INGOT
                            Material.COPPER_ORE,
                            Material.DEEPSLATE_COPPER_ORE -> if (raw) Material.RAW_COPPER else Material.COPPER_INGOT
                            Material.GOLD_ORE,
                            Material.DEEPSLATE_GOLD_ORE -> if (raw) Material.RAW_GOLD else Material.GOLD_INGOT
                            Material.NETHER_GOLD_ORE -> Material.GOLD_NUGGET
                            Material.REDSTONE_ORE,
                            Material.DEEPSLATE_REDSTONE_ORE -> Material.REDSTONE
                            Material.EMERALD_ORE,
                            Material.DEEPSLATE_EMERALD_ORE -> Material.EMERALD
                            Material.LAPIS_ORE,
                            Material.DEEPSLATE_LAPIS_ORE -> Material.LAPIS_LAZULI
                            Material.DIAMOND_ORE,
                            Material.DEEPSLATE_DIAMOND_ORE -> Material.DIAMOND
                            Material.NETHER_QUARTZ_ORE -> Material.QUARTZ
                            Material.ANCIENT_DEBRIS -> if (raw) Material.NETHERITE_SCRAP else Material.NETHERITE_INGOT
                            Material.BUDDING_AMETHYST -> Material.AMETHYST_SHARD
                            else -> throw UnhandledException(Throwable("Unhandled ore type ${block.type}"))
                        })
                    }
                    display.displayHeight = 1f
                    display.displayWidth = 1f
                    display.isGlowing = true
                    display.isVisibleByDefault = false
                    player.showEntity(this, display)
                    display.glowColorOverride = when(block.type)
                    {
                        Material.COAL_ORE,
                        Material.DEEPSLATE_COAL_ORE -> Color.fromRGB(0x2e2e2e)
                        Material.IRON_ORE,
                        Material.DEEPSLATE_IRON_ORE -> Color.fromRGB(0xd8af93)
                        Material.COPPER_ORE,
                        Material.DEEPSLATE_COPPER_ORE -> Color.fromRGB(0xe0734d)
                        Material.GOLD_ORE,
                        Material.DEEPSLATE_GOLD_ORE,
                        Material.NETHER_GOLD_ORE -> Color.fromRGB(0xeb9d0e)
                        Material.REDSTONE_ORE,
                        Material.DEEPSLATE_REDSTONE_ORE -> Color.fromRGB(0xff0000)
                        Material.EMERALD_ORE,
                        Material.DEEPSLATE_EMERALD_ORE -> Color.fromRGB(0x17dd62)
                        Material.LAPIS_ORE,
                        Material.DEEPSLATE_LAPIS_ORE -> Color.fromRGB(0x1855bd)
                        Material.DIAMOND_ORE,
                        Material.DEEPSLATE_DIAMOND_ORE -> Color.fromRGB(0x77e7d1)
                        Material.NETHER_QUARTZ_ORE -> Color.fromRGB(0xeae5de)
                        Material.ANCIENT_DEBRIS -> Color.fromRGB(0x654740)
                        Material.BUDDING_AMETHYST -> Color.fromRGB(0xa678f1)
                        else -> throw UnhandledException(Throwable("Unhandled ore type ${block.type}"))
                    }
                    (display as CraftDisplay).handle.persistentInvisibility = true //Force invisible
                    display.handle.setSharedFlag(5, true) //Force invisible

                    map[location] = display
                    object : BukkitRunnable()
                    {
                        override fun run() {
                            display.remove()
                            map.remove(location)
                        }
                    }.runTaskLater(this, if (player.location.world!!.environment != World.Environment.NETHER) 1200 else 300)
                }
    }
}
