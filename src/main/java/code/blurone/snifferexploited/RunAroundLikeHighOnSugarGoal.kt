package code.blurone.snifferexploited


import net.minecraft.core.BlockPos
import net.minecraft.core.SectionPos
import net.minecraft.world.entity.ai.goal.Goal
import net.minecraft.world.entity.ai.util.DefaultRandomPos
import net.minecraft.world.level.LevelReader
import net.minecraft.world.level.chunk.ChunkStatus
import org.bukkit.Material
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftSniffer
import org.bukkit.entity.Sniffer
import org.bukkit.inventory.ItemStack
import java.util.*

class RunAroundLikeHighOnSugarGoal(private val craftSniffer: CraftSniffer) : Goal() {
    init {
        flags = EnumSet.of(Flag.MOVE)
    }
    
    private val sniffer = craftSniffer.handle
    private var posX = 0.0
    private var posY = 0.0
    private var posZ = 0.0
    private val pos: () -> BlockPos = { BlockPos(posX.toInt(), posY.toInt(), posZ.toInt()) }
    private var speedModifier = 10.0
    private var placesLeft = 5
    private var explosionAmount = 2.0f
    private var shallFire = false
    private var started = false

    override fun canUse(): Boolean {
        val vec3d = DefaultRandomPos.getPos(sniffer, 8, 4)
        return if (vec3d == null) {
            false
        } else {
            posX = vec3d.x
            posY = vec3d.y
            posZ = vec3d.z
            true
        }
    }

    override fun start() {
        sniffer.navigation.moveTo(posX, posY, posZ, speedModifier)
        started = true
    }

    override fun canContinueToUse(): Boolean {
        return placesLeft > 0
    }

    override fun tick() {
        sniffer.goalSelector.availableGoals.forEach {
            if (it.goal != this)
            {
                it.stop()
                sniffer.goalSelector.removeGoal(it.goal)
            }
        }

        craftSniffer.state = Sniffer.State.DIGGING
        if (sniffer.navigation.isStuck) explode()
        if (!sniffer.navigation.isDone && isValidTarget(sniffer.level(), pos())) return

        if (placesLeft > 0)
        {
            canUse()
            start()
            placesLeft--
        }
        else
            explode()
    }

    private fun explode()
    {
        sniffer.navigation.stop()
        craftSniffer.world.createExplosion(craftSniffer.location, explosionAmount, shallFire, true, craftSniffer)
        craftSniffer.world.dropItem(craftSniffer.location, ItemStack(Material.PLAYER_HEAD))
        craftSniffer.remove()
    }

    private fun isValidTarget(iworldreader: LevelReader, blockposition: BlockPos): Boolean {
        val ichunkaccess = iworldreader.getChunk(
            SectionPos.blockToSectionCoord(blockposition.x),
            SectionPos.blockToSectionCoord(blockposition.z),
            ChunkStatus.FULL,
            false
        )
        return if (ichunkaccess == null) false
            else ichunkaccess.getBlockState(blockposition.above()).isAir && ichunkaccess.getBlockState(
            blockposition.above(2)
        ).isAir
    }

    fun potentiate()
    {
        if (!started) return

        if (explosionAmount >= 16)
            return explode()

        explosionAmount *= 2
        speedModifier *= 1.5
        placesLeft += 1
        shallFire = true
    }
}