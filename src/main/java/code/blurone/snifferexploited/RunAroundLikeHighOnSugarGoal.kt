package code.blurone.snifferexploited

import net.minecraft.world.entity.ai.goal.Goal
import net.minecraft.world.entity.ai.util.DefaultRandomPos
import net.minecraft.world.phys.Vec3
import org.bukkit.Color
import org.bukkit.Material
import org.bukkit.NamespacedKey
import org.bukkit.craftbukkit.v1_20_R3.entity.CraftSniffer
import org.bukkit.entity.Sniffer
import org.bukkit.inventory.ItemFlag
import org.bukkit.inventory.ItemStack
import org.bukkit.inventory.meta.PotionMeta
import org.bukkit.persistence.PersistentDataType
import java.util.*

class RunAroundLikeHighOnSugarGoal(private val craftSniffer: CraftSniffer, private val potionNamespacedKey: NamespacedKey) : Goal() {
    init {
        flags = EnumSet.of(Flag.MOVE)
    }
    
    private val sniffer = craftSniffer.handle
    private var posX = 0.0
    private var posY = 0.0
    private var posZ = 0.0
    private var speedModifier = 10.0
    private var ticksLeft = timeBeforeExploding
    private var timesUpgraded = 0
    private var explosionAmount: Float = if (disableExplosion) 0f else 2f
    private var shallFire: () -> Boolean = {timesUpgraded >= minFire && !disableExplosion}
    var started = false

    override fun canUse(): Boolean = true

    override fun start() {
        newRandomBlock()
        started = true
    }

    override fun canContinueToUse(): Boolean = true

    override fun tick() {
        if (ticksLeft <= 0 || sniffer.fallDistance >= 5) explode()

        ticksLeft--

        sniffer.goalSelector.availableGoals.forEach {
            if (it.goal != this)
            {
                it.stop()
                sniffer.goalSelector.removeGoal(it.goal)
            }
        }

        newRandomBlock()
        craftSniffer.state = Sniffer.State.DIGGING
        if (sniffer.navigation.isStuck) explode()
    }

    private fun explode()
    {
        sniffer.navigation.stop()
        craftSniffer.world.createExplosion(craftSniffer.location, explosionAmount, shallFire(), !disableExplosion, craftSniffer)

        if (sniffer.random.nextDouble() > potionDropChance) return

        val itemStack = ItemStack(Material.POTION)
        val meta = itemStack.itemMeta!! as PotionMeta
        meta.setDisplayName("ยงr$defaultPotionName")
        meta.lore = listOf("ยง9$defaultPotionInfo")
        meta.color = Color.fromRGB(0xffbf23)
        meta.persistentDataContainer.set(potionNamespacedKey, PersistentDataType.BOOLEAN, false)
        meta.addItemFlags(ItemFlag.HIDE_POTION_EFFECTS)
        itemStack.itemMeta = meta

        craftSniffer.world.dropItem(craftSniffer.location, itemStack)
        craftSniffer.remove()
    }

    private fun newRandomBlock() {
        var vec3d = DefaultRandomPos.getPos(sniffer, 8 * speedModifier.toInt() / 10, 2)
        if (vec3d == null) vec3d = Vec3(
            sniffer.x + sniffer.random.nextInt(-8 * speedModifier.toInt() / 10, 8 * speedModifier.toInt() / 10),
            sniffer.y,
            sniffer.z + sniffer.random.nextInt(-8 * speedModifier.toInt() / 10, 8 * speedModifier.toInt() / 10)
        )
        posX = vec3d.x
        posY = vec3d.y
        posZ = vec3d.z
        sniffer.navigation.moveTo(posX, posY, posZ, speedModifier)
    }

    fun potentiate()
    {
        if (!started) return

        timesUpgraded++

        if (explosionAmount >= 8f)
            return explode()

        explosionAmount *= 2
        speedModifier *= 2
        ticksLeft = timeBeforeExploding
    }
}