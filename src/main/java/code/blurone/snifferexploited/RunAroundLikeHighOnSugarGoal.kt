package code.blurone.snifferexploited

import com.mojang.authlib.GameProfile
import com.mojang.authlib.properties.Property
import net.minecraft.world.entity.ai.goal.Goal
import net.minecraft.world.entity.ai.util.DefaultRandomPos
import net.minecraft.world.phys.Vec3
import org.bukkit.Location
import org.bukkit.Material
import org.bukkit.craftbukkit.v1_20_R1.entity.CraftSniffer
import org.bukkit.craftbukkit.v1_20_R1.profile.CraftPlayerProfile
import org.bukkit.entity.EntityType
import org.bukkit.entity.Sniffer
import org.bukkit.inventory.ItemStack
import org.bukkit.inventory.meta.SkullMeta
import java.util.*
import java.util.logging.Logger

class RunAroundLikeHighOnSugarGoal(private val craftSniffer: CraftSniffer, private val logger: Logger) : Goal() {
    init {
        flags = EnumSet.of(Flag.MOVE)
    }
    
    private val sniffer = craftSniffer.handle
    private val maxTicks = 20
    private var posX = 0.0
    private var posY = 0.0
    private var posZ = 0.0
    private var speedModifier = 10.0
    private var ticksLeft = maxTicks
    private var explosionAmount = 2.0f
    private var shallFire = false
    private var started = false

    override fun canUse(): Boolean = true

    override fun start() {
        newRandomBlock()
        started = true
    }

    override fun canContinueToUse(): Boolean = true

    override fun tick() {
        if (ticksLeft <= 0 || sniffer.fallDistance >= 5) explode()

        ticksLeft--

        sniffer.goalSelector.availableGoals.forEach {
            if (it.goal != this)
            {
                it.stop()
                sniffer.goalSelector.removeGoal(it.goal)
            }
        }

        newRandomBlock()
        craftSniffer.state = Sniffer.State.DIGGING
        if (sniffer.navigation.isStuck) explode()
        logger.info("Ticks left: $ticksLeft")
    }

    private fun explode()
    {
        sniffer.navigation.stop()
        craftSniffer.world.createExplosion(craftSniffer.location, explosionAmount, shallFire, true, craftSniffer)
        val profile = GameProfile(UUID.randomUUID(), null)
        profile.properties.clear()
        profile.properties.put("textures", Property("textures",
        "ewogICJ0aW1lc3RhbXAiIDogMTY4OTU1MzAzOTkzMywKICAicHJvZmlsZUlkIiA6ICI3YmRhNDBlM2E1YjU0YzE0YWJmZGYzNGMyODY2NjQ0NiIsCiAgInByb2ZpbGVOYW1lIiA6ICJfRWdvcl9wbGF5XyIsCiAgInNpZ25hdHVyZVJlcXVpcmVkIiA6IHRydWUsCiAgInRleHR1cmVzIiA6IHsKICAgICJTS0lOIiA6IHsKICAgICAgInVybCIgOiAiaHR0cDovL3RleHR1cmVzLm1pbmVjcmFmdC5uZXQvdGV4dHVyZS84MDk4NzcyYzQ5YjY0NGRkNjY1ZTMzYzY3NTA0MWM2N2NlZTg0MmRlMGE3ZDNjN2Y0ZTgwNTI2MDc3OWVmOTg3IgogICAgfQogIH0KfQ==",
        "tObDJ+wHp+MTNi+TEwVyZaXMi1G6pbFOHNs5BLw+qh3sa710Z3QDPp3Kf/fjmyn5FZmUo/GVSS5kQCqosoXWEz7qtW1ZHChTgWvGCjWFlcFiZ5HzN3m/Ejwp/7kAoGLBBRlakVFpjEIy2JGZ3x59AsFknIu2tInkPKSAuy/Ha8gnPB0bpoLUe5vHaE4j2XNTULkkbqqYHhaSWKqM4fwrjQq35yqLLACU5oGKf51SbgL04umEOO0zhtymLdT71WgUr2Dg+HAe/k7vV+vIDDAhSe5+1Mjg6IMICx+6AeDpvxlS3h6pnS3uHzqgQKYN+3aQ0ao/pSiT+TtQ0Jjx0H1YXTJhTp8q3s4fHHeH624c8DVlk5D8VyMWHZAb/zKvBnWhbJDA2stxEP/+DF0prxsPK1e1ZRwJx0ks/4/2hDl/uS7DyDaVKyQJyiLiWRjLQoTiN370irKxvX1uYX0lwsX/00xcqhFlsj5R/1odkjrfczVQTFeFP6PHEOjUSSRd16g8sHmwNfzHz6bnfnaIERyBPzAXC8HYSt49D3LYO3eVhCorhN3YqzqiAh3a+Ek8OttSaPC0Os6EwRPHvFs2PODkNzSXg27VIyVYfPZDEEzTy1WJ7gV6JPn8SZkbIsOCvaKlsFWWF5vMz6/SRjJB6sTYbcPxy7MudavO1xOwaCAnmrU="
            ))
        val itemStack = ItemStack(Material.PLAYER_HEAD)
        val meta = itemStack.itemMeta as SkullMeta
        meta.ownerProfile = CraftPlayerProfile(profile)
        meta.setDisplayName("§2Sniffer Nose")
        meta.lore = listOf("§6Click to §e§lSNIFF")
        itemStack.itemMeta = meta
        craftSniffer.world.dropItem(craftSniffer.location, itemStack)
        craftSniffer.remove()
    }

    private fun newRandomBlock() {
        var vec3d = DefaultRandomPos.getPos(sniffer, 8 * speedModifier.toInt() / 10, 2)
        if (vec3d == null) vec3d = Vec3(
            sniffer.x + sniffer.random.nextInt(-8 * speedModifier.toInt() / 10, 8 * speedModifier.toInt() / 10),
            sniffer.y,
            sniffer.z + sniffer.random.nextInt(-8 * speedModifier.toInt() / 10, 8 * speedModifier.toInt() / 10)
        )
        posX = vec3d.x
        posY = vec3d.y
        posZ = vec3d.z
        sniffer.navigation.moveTo(posX, posY, posZ, speedModifier)
    }

    fun potentiate()
    {
        if (!started) return

        if (explosionAmount >= 16)
            return explode()

        explosionAmount *= 2
        speedModifier *= 2
        ticksLeft = maxTicks
        shallFire = true
    }
}