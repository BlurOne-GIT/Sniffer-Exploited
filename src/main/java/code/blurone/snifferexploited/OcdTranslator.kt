package code.blurone.snifferexploited

import org.bukkit.NamespacedKey
import org.bukkit.configuration.ConfigurationSection
import org.bukkit.entity.EntityType
import org.bukkit.entity.Player
import org.bukkit.event.EventHandler
import org.bukkit.event.EventPriority
import org.bukkit.event.Listener
import org.bukkit.event.entity.EntityPickupItemEvent
import org.bukkit.event.inventory.BrewEvent
import org.bukkit.event.inventory.InventoryOpenEvent
import org.bukkit.inventory.ItemStack
import org.bukkit.persistence.PersistentDataType

class OcdTranslator(
    private val potionTranslations: ConfigurationSection,
    private val splashTranslations: ConfigurationSection,
    private val lingeringTranslations: ConfigurationSection,
    private val infoTranslations: ConfigurationSection,
    private val potionNamespacedKey: NamespacedKey) : Listener {

    companion object {
        const val DEFAULT_POTION_NAME = "Potion of Sniffing"
        const val DEFAULT_SPLASH_NAME = "Splash Potion of Sniffing"
        const val DEFAULT_LINGERING_NAME = "Lingering Potion of Sniffing"
        const val DEFAULT_INFO = "Instant Sniffing"
    }

    @EventHandler
    fun pickupTranslator(event: EntityPickupItemEvent)
    {
        if (event.entity.type != EntityType.PLAYER ||
            !PotionOfSniffing.isSniffingPotion(event.item.itemStack, potionNamespacedKey))
            return

        ocdTranslator(event.item.itemStack, (event.entity as Player).locale)
    }

    @EventHandler
    fun openInventoryTranslator(event: InventoryOpenEvent)
    {
        event.inventory.contents.forEach {
            if (it != null && PotionOfSniffing.isSniffingPotion(it, potionNamespacedKey))
                ocdTranslator(it, (event.player as Player).locale)
        }
    }

    @EventHandler(priority = EventPriority.HIGH)
    fun brewTranslator(event: BrewEvent)
    {
        if (event.contents.viewers.isEmpty())
            return

        event.contents.forEach {
            if (PotionOfSniffing.isSniffingPotion(it, potionNamespacedKey))
                ocdTranslator(it, (event.contents.viewers[0] as Player).locale)
        }
    }

    private fun ocdTranslator(item: ItemStack, locale: String)
    {
        val strippedLocale = locale.split("_")[0]
        val meta = item.itemMeta!!
        val potionLevel = meta.persistentDataContainer.get(potionNamespacedKey, PersistentDataType.INTEGER)
        val itemTranslations = when (potionLevel)
        {
            0 -> potionTranslations
            1 -> splashTranslations
            2 -> lingeringTranslations
            else -> throw IllegalStateException("Unhandled potion form: $potionLevel")
        }
        val defaultTranslation = when (potionLevel)
        {
            0 -> DEFAULT_POTION_NAME
            1 -> DEFAULT_SPLASH_NAME
            2 -> DEFAULT_LINGERING_NAME
            else -> throw SecurityException("An IllegalStateException should have been fired before; something is modifying the memory.")
        }
        itemTranslations.getString(
            locale,
            itemTranslations.getString(strippedLocale, defaultTranslation)
        )!!.let { meta.setDisplayName("ยงr$it") }
        infoTranslations.getString(
            locale,
            infoTranslations.getString(strippedLocale, DEFAULT_INFO)
        )!!.let { meta.lore = listOf("ยง9$it") }
        item.itemMeta = meta
    }
}