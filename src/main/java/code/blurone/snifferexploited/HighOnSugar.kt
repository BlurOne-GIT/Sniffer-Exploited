package code.blurone.snifferexploited

import net.minecraft.world.InteractionHand
import org.bukkit.GameMode
import org.bukkit.Material
import org.bukkit.configuration.ConfigurationSection
import org.bukkit.craftbukkit.v1_20_R3.entity.CraftPlayer
import org.bukkit.craftbukkit.v1_20_R3.entity.CraftSniffer
import org.bukkit.entity.EntityType
import org.bukkit.entity.Sniffer
import org.bukkit.event.EventHandler
import org.bukkit.event.Listener
import org.bukkit.event.player.PlayerInteractEntityEvent
import org.bukkit.event.player.PlayerTeleportEvent
import org.bukkit.inventory.EquipmentSlot
import org.bukkit.metadata.FixedMetadataValue
import org.bukkit.plugin.java.JavaPlugin
import org.bukkit.scheduler.BukkitRunnable
import kotlin.math.atan2
import kotlin.math.pow
import kotlin.math.sqrt

class HighOnSugar(private val plugin: JavaPlugin, config: ConfigurationSection, private val drop: Boolean) : Listener {
    companion object {
        private const val HIGH_ON_SUGAR_META_NAME = "sniffer_exploited:high_on_sugar"
    }

    private val invincibleSniffers = config.getBoolean("invincible_sniffers", false)
    private val timeBeforeExploding = (config.getDouble("time_before_exploding", 4.0) * 5).toInt()
    private val pacificExplosion = config.getBoolean("pacific_explosion", false)
    private val minFire = config.getInt("min_fire", 2) - 1
    private val initialSpeed = config.getDouble("initial_speed", 10.0)
    private val potionDropChance = config.getDouble("potion_drop_chance", 100.0) * 0.01

    @EventHandler
    private fun playerInteractEvent(event: PlayerInteractEntityEvent)
    {
        if (event.rightClicked.type != EntityType.SNIFFER || event.player.gameMode == GameMode.SPECTATOR ||
            (event.hand == EquipmentSlot.HAND && !(event.player.inventory.itemInMainHand.type == Material.SUGAR || event.player.inventory.itemInMainHand.type == Material.LEGACY_SUGAR)) ||
            (event.hand == EquipmentSlot.OFF_HAND && !(event.player.inventory.itemInOffHand.type == Material.SUGAR || event.player.inventory.itemInOffHand.type == Material.LEGACY_SUGAR)))
            return

        val sugarStack = if (event.hand == EquipmentSlot.HAND) event.player.inventory.itemInMainHand else event.player.inventory.itemInOffHand
        (event.player as CraftPlayer).handle.swing(if (event.hand == EquipmentSlot.HAND) InteractionHand.MAIN_HAND else InteractionHand.OFF_HAND, true)
        if (event.player.gameMode != GameMode.CREATIVE) sugarStack.amount--

        val sniffer = event.rightClicked as CraftSniffer

        if (sniffer.hasMetadata(HIGH_ON_SUGAR_META_NAME))
        {
            val ralhosGoal = sniffer.getMetadata(HIGH_ON_SUGAR_META_NAME).first().value() as RunAroundLikeHighOnSugarGoal
            ralhosGoal.potentiate()
            if (!ralhosGoal.started) return

            sniffer.state = Sniffer.State.SNIFFING
            sniffer.handle.sniffingAnimationState.startIfStopped(sniffer.handle.tickCount)

            return
        }

        if (invincibleSniffers)
            sniffer.isInvulnerable = true
        sniffer.handle.goalSelector.removeAllGoals { it.stop(); true }
        sniffer.handle.navigation.stop()
        sniffer.teleport(sniffer.location.apply {
            yaw = Math.toDegrees(
                atan2(
                    event.player.location.z - sniffer.location.z, event.player.location.x - sniffer.location.x
                )
            ).toFloat() - 90

            pitch = Math.toDegrees(
                -atan2(
                    event.player.eyeLocation.y - sniffer.eyeLocation.y,
                    sqrt(
                        (event.player.location.x - sniffer.location.x).pow(2) + (event.player.location.z - sniffer.location.z).pow(2)
                    )
                )
            ).toFloat()
        }, PlayerTeleportEvent.TeleportCause.PLUGIN)
        sniffer.handle.setYBodyRot(sniffer.handle.yHeadRot)
        val goal = RunAroundLikeHighOnSugarGoal(sniffer, timeBeforeExploding, pacificExplosion, minFire, if (drop) potionDropChance else 0.0, initialSpeed)
        object : BukkitRunnable()
        {
            override fun run() {
                sniffer.state = Sniffer.State.SNIFFING
                sniffer.handle.sniffingAnimationState.startIfStopped(sniffer.handle.tickCount)
            }
        }.runTaskLater(plugin, 10)
        object : BukkitRunnable()
        {
            override fun run() {
                sniffer.handle.goalSelector.addGoal(0, goal)
                sniffer.handle.goalSelector.availableGoals.first { it.goal == goal }.start()
            }
        }.runTaskLater(plugin, 30)
        sniffer.setMetadata(HIGH_ON_SUGAR_META_NAME, FixedMetadataValue(plugin, goal))
    }
}